import re
import json
import random
from collections import defaultdict


def tokenize(text):
    """–¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è"""
    punctuation = "\\" + "\\".join(list("[](){}!?.,:;'\"\\/*&^%$_+-‚Äì‚Äî=<>@|~"))
    words = "[a-zA-Z–∞-—è–ê-–Ø—ë–Å]+"
    compounds = f"{words}-{words}"
    scr = "\\.{3}"

    tokenize_re = re.compile(f"({scr}|{compounds}|{words}|[{punctuation}])")
    newlines_re = re.compile(r"\n\s*")
    paragraphed = newlines_re.sub(NEWLINE_SYMBOL, text)

    return [token for token in tokenize_re.split(paragraphed) if token]


def slice_corpus(corpus, smpl_size):
    """–ù–∞—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ smpl_size —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–µ–ª–æ–≤"""
    samples = (corpus[i: i + smpl_size] for i, _ in enumerate(corpus))
    return [s for s in samples if len(s) == sample_size]


def collect_transitions(samples):
    """–í—ã–¥–µ–ª–∏–º –∫–ª—é—á–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —Å—ç–º–ø–ª–∞–º –∏ —Å–æ–±–µ—Ä—ë–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—Å—Ç—Ä–µ—Ç–∏–≤—à–∏—Ö—Å—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:"""
    transitions = defaultdict(list)
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–µ–º–ø–ª –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∫–ª—é—á–∞ –∏ —Ç–æ–∫–µ–Ω-–ø–µ—Ä–µ—Ö–æ–¥.
    for sample in samples:
        # –ò–∑ –ø–µ—Ä–≤—ã—Ö (n - 1) —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á,
        # –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:
        state = "".join(sample[0:-1])
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω ‚Äî –ø–µ—Ä–µ—Ö–æ–¥:
        nxt = sample[-1]
        # –î–∞–ª—å—à–µ ‚Äî –≤—Å—ë, –∫–∞–∫ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ :‚Äì)
        # –ò—â–µ–º —Å–ø–∏—Å–æ–∫, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏,
        # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω-–ø–µ—Ä–µ—Ö–æ–¥:
        transitions[state].append(nxt)
    return transitions


def predict_next_word(chain, transitions, smpl_size):
    """"–ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø—É—Ç–µ–º –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ç–æ–∫–µ–Ω—É –≤ –º–∞—Ç—Ä–∏—Ü–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"""
    last_state = "".join(chain[-(smpl_size - 1):])
    next_words = transitions[last_state]
    return random.choice(next_words) if next_words else ""


def create_chain(start_text, transitions):
    """"–ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Ü–µ–ø–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    head = start_text or random.choice(list(transitions.keys()))
    return tokenize(head)


def generate_chain(start_text, transitions, smpl_size):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ø–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    chain = create_chain(start_text, transitions)

    while True:
        state = predict_next_word(chain, transitions, smpl_size)
        yield state

        if state:
            chain.append(state)
        else:
            chain = chain[:-1]


def tokens_to_text(tokens):
    """–°–∫–ª–µ–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç"""
    paragraph_char= '\n\n'
    return "".join(tokens).replace(NEWLINE_SYMBOL, paragraph_char)


def get_data_from_json_file():
    """"–ü–∞—Ä—Å–∏–º json-—Ñ–∞–π–ª FILENAME —Å –≤—ã–≥—Ä—É–∑–∫–æ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ telegram"""
    with open(FILENAME, encoding='utf-8') as f:
        templates = json.load(f)

    messages = {section['from']: '' for section in templates['messages'] if section.get('from')}
    for section in templates['messages']:
        if (section.get('from') is not None
                and isinstance(section['text'], str)):
            messages[section['from']] += section['text'] + ' '

    return messages


def get_sample_size(len_text_message):
    """"–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Å–ª–æ–≤–∞—Ä—è –∞–≤—Ç–æ—Ä–∞"""
    if len_text_message > 70000:
        return 8
    elif 10000 <= len_text_message <= 70000:
        return int(len_text_message // 10000)
    else:
        return 2


def generate(source, start='', words_count=100, sample_size=2):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
    corpus = tokenize(source)
    samples = slice_corpus(corpus, sample_size)
    transitions = collect_transitions(samples)

    generator = generate_chain(start, transitions, sample_size)
    generated_tokens = [next(generator) for _ in range(words_count)]

    return tokens_to_text(generated_tokens)


def main():
    messages = get_data_from_json_file()
    for key, text_message in messages.items():
        len_text_message = len(text_message)
        print(f'*** –û—Ç–≤–µ—á–∞–µ—Ç {key} (—á–∏—Å–ª–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–æ—Ä–ø—É—Å–µ: {len_text_message}) ***')
        sample_size = get_sample_size(len_text_message)
        print(generate(source=text_message, words_count=WORDS_COUNT, sample_size=sample_size))
        print()
        
        
if __name__ == '__main__':
    # –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    NEWLINE_SYMBOL = "¬ß"  # –∑–Ω–∞–∫ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –≤ —Ç–µ–∫—Å—Ç–µ
    FILENAME = 'input.json'  # –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    FROM = 'lvnvl üòê'  # –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç
    WORDS_COUNT = 150  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

    main()
